操作符
一元操作符
  只能操作一个值的操作符叫做一元操作符
  
  递增和递减操作符
  前置递增和递减
  var a = 19;
  ++a;    //20
  --a;    //18
  执行前置递增和递减操作符时，被操作的变量都是在语句被求值以前改变的
  var b;
  b = ++a + 2;    //b=22; a=20（先将a的值改变为20 ，再执行的a+2的值）
  
  后置递增和递减
  a++;    //20
  a--;    //18
  执行后置递增和递减操作符时，变量的值都是在语句被求值以后被改变的
  b = a++ + 2;    //b=21; a=20（先计算a+2，再将a的值改变为20）
  所有着4个操作符对任何值都适用，不仅是整数，还可以是浮点数、字符串、布尔值、对象
  
  一元加和减
  
  一元加操作符以一个加号+表示，放在数值的前面，不会对数值造成任何的影响
  对非数值应用一元加操作符，该操作符会像Number()一样对这个值进行转换
  
  一元减操作符以一个减号-来表示，主要用来表示负数
  对非数值使用一元减操作符时，会先将值使用Number()转换为数值，再将其变为负数
  
  
位操作符
  位操作符用于在最基本的层次上，即按照内存中表示数值的位来操作数值。位操作符并不是直接操作64位的值，而是先将64位的值转化为32位的值，然后执行操作，最
后再吧32位的结果转化为64位的值
  对于有符号的整数，前31位表示整数的值，第32位表示数值的符号。0表示整数，1表示负数
  正数使用32位的二进制码存储，负数同样以二进制码存储，但是使用的格式是二进制补码
  计算一个数值的二进制补码的3个步骤：
    1、求这个数值绝对值的二进制码
    2、求二进制反码，即将0替换为1,1替换为0
    3、得到的二进制反码加1
    例如：-18的二进制补码
    1、先求18的二进制码：0000 0000 0000 0000 0000 0000 0001 0010
    2、求二进制的反码：  1111 1111 1111 1111 1111 1111 1110 1101
    3、反码加一：       1111 1111 1111 1111 1111 1111 1110 1110
  ECMAScript在以二进制字符串形式输出一个负数时，我们看到的只是这个负数绝对值的二进制码前面加上了一个负号
    var a =-18；
    alert(a.toString(2));    // -10010
  按位非：
  按位非操作符由一个波浪线（~）表示，执行按位非的结果就是返回数值的反码
  按位非操作的本质：操作数的负值减1
  例如：
    var a = 25;
    var b = ~a;
    alert(b);    //-26
    
  按位与：
  按位与操作符由一个和号字符（&）表示，它操作两个操作数。按位与操作就是将两个数值的每一位对齐，然后根据规则对相同位置上的两个数执行AND操作
  第一数值的位                    第二数值的位                    结果
  1                               1                             1
  0                               1                             0
  1                               0                             0
  0                               0                             0
  
  按位或：
  按位或操作符由一个竖线符号（|）表示，同样也有两个操作数
  第一个数值的位                   第二个数值的位                   结果
  1                               1                               1
  1                               0                               1
  0                               1                               1
  0                               0                               0
  
  按位异或：
  安慰异或操作符由一个插入符号（^）表示
  第一个数值的位                   第二个数值的位                   结果
  1                               1                               0
  1                               0                               1
  0                               1                               1
  0                               0                               0
  
  左移：
  左移操作符由两个小于号<<表示，这个操作符会将数值的所有位向左移动指定的位数
  左移不会影响操作数的符号位，不会改变数值的符号
  左移本质：向左移动n位，相当于操作数乘以2的n次方
  var a = 2;
  var b = a << 5;    // 2*(2*2*2*2*2)
  alert(b);    //64
  
  有符号的右移：
  有符号的右移由两个大于符号>>表示，这个操作符会将数值向右移动，但保留符号位（即正负号标记）
  
  无符号右移：
  无符号右移由三个大于符号>>>来表示，这个操作符会将数值的所有32位都向右移动
  对于正数来说，无符号右移的结果与有符号右移相同
  对于负数来说，无符号右移操作符会把负数的二进制码当成正数的二进制码，然后再右移

布尔操作符
  布尔操作符一共有3个：与、或、非
  逻辑非：
  逻辑非操作符由一个叹号！表示，它可以应用于任何值，返回的值都是一个布尔值。逻辑非操作符作用于非布尔值，
会将它转换为一个布尔值，然后再对其求反
  同时使用两个逻辑非操作，实际上就会模拟Boolean()转型函数的行为
  
  逻辑与：
  逻辑与操作符由两个和号&&表示，有两个操作数
  逻辑与操作属于短路操作，即如果第一个操作数能够决定结果，那么就不会对第二个操作数进行判断求值。
  对于逻辑与操作而言，如果第一个操作数是false，则无论第二个操作数是什么，结果都不可能是true
  当第一个操作数的值为true时，第二个操作数不能是未声明的值，会报错，但是当第一个操作数是false时，第二个值可以使任何值（因为不会再对第二个值进行判断）
  逻辑与操作可以应用于任何值：
    1、如果第一个值是对象，那么返回第二个值
    2、如果第二个值是对象，那么当第一个值是true时才返回第二个值
    3、如果两个值都是对象，返回第二个值
    4、如果其中一个值是null，那么返回null
    5、如果其中一个值是NaN,那么返回NaN
    6、如果其中一个值是undefined，那么返回undefined
  
  逻辑或：
  逻辑或操作符由两个竖线||表示，有两个操作数
  逻辑或也是短路操作符，当第一个操作数的值为true时，不会对第二个操作数求值
  逻辑或操作符可以应用于任何值：
    1、如果第一个操作数是对象，那么返回第一个操作数
    2、如果第一个操作数的求值结果为false，那么返回第二个操作数
    3、如果两个操作数都是对象，那么返回第一个操作数
    4、如果两个操作数都是null，返回null
    5、如果两个操作数都是NaN,返回NaN
    6、如果两个操作数都是undefined，返回undefined




















