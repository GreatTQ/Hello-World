1、window.sessionStorage
  localStorage和sessionStorage允许在浏览器中存储key/value对的数据
  sessionStorage用于临时保存同一窗口或标签的数据，在关闭窗口或标签页之后数据将被自动删除
  如果想在浏览器窗口关闭后还保存该数据，可以使用localStorage属性，该数据对象没有过期时间，除非你手动删除

2、关于VUE中 import 、 export 和 export default 的注意问题
  import关键字用于引用一个依赖包，需要相对路径
    示例：import axios from "./axios"
  import什么情况下使用{}的方式引用，什么情况下只用一个变量就行
    （1）在引入一个使用export抛出的变量的情况下，使用{}的方式引用
      示例：
      a.js
      export function gitList(){};  // 默认抛出一个gitList变量
      
      b.js
      import {gitList} from "./a.js"
    （2）引入一个使用export default抛出的变量，只需要自己取一个名字就行
      示例：
      a.js
      var obj = {name= "Lee"};
      export default obj;
      
      b.js
      import aaa from "./a.js";
      conlose.log(aaa.name); // 'Lee'
    （3）注意
      在一个.js文件中，只能有一个export default；
      但是在一个.js文件中，可以有多个export
      
3、JSON.parse
  JSON.parse用来解析JSON数据，返回一个由字符串描述的JavaScript值或对象。提供可选的reviver函数，用来修改解析生成的原始值，调用时机在parse函数返回之前
  
4、vue-router滚动行为
  使用前端路由，当跳转到新路由时，想要页面滚动到顶部，或者是保存原先的滚动位置，就像重新加载页面那样，该功能只能在支持history.pushstate的浏览器中使用
  当创建一个vue-router实例，可以提供一个scrollBehavior方法：
    const router = new VueRouter({
      routers: [...],
      scrollBehavior(to, from, savedPosition) {
        if(savedPosition) {
          return savedPosition  // 返回savedPosition，在按下 后退/前进 按钮时，就像浏览器的原生表现那样
        } else {
          // return期望滚动到的位置
        } 
      }
    });
    
  5、关于vue中的data和computed
    data：
      它是vue的核心属性，它是vue绑定数据到HTML标签的数据源泉，vue会自动监视data里面的数据变化，自动更新数据到HTML标签里去
      
    computed：
      vue的计算属性（computed）会自动混入到vue实例中，所有getter和setter的this上下文都会自动绑定为vue实例
      官方示例：
      var vm = new Vue({
      data: { a: 1 },
      computed: {
        // 仅读取，值只须为函数，当只读取的时候，它不能去改变data中的值，只能取得data中的a，然后再对a进行计算，然后缓存a
        aDouble: function () {
          return this.a * 2
        },
        // 读取和设置
        aPlus: {
          get: function () {
            return this.a + 1
          },
          // set函数可以改变data中的a
          set: function (v) {
            this.a = v - 1
          }
        }
      }
    })
    vm.aPlus   // -> 2
    vm.aPlus = 3
    vm.a       // -> 2
    vm.aDouble // -> 4

6、generator函数
  generator函数有多种理解角度，首先可以把它理解成，generator是一个状态机，内部封装了多个内部状态
  执行generator函数会返回一个遍历器对象，generator除了是一个状态机，还是一个遍历器对象生成器，可以依次便利generator内部的每个状态
  
  generator有两个特征：
    1、function关键字与函数名之间有一个星号
    2、函数体内部使用yield表达式，定义不同的内部状态
  
  关于yield表达式的理解：
    a、yield关键字用来暂停和恢复一个生成器函数
    b、用法
      [rv] = field [expression];
      // expression:定义通过迭代器协议从生成器函数返回的值，如果省略，则返回undefined（就是从生成器函数返回的值）
      // rv：传递给生成器的next()方法的可选值，以恢复其执行
    c、描述
      yield关键字使生成器函数执行暂停，yield关键字后面表达式的值返回给生成器的调用者，它可以被认为是一个居于生成器版本的return关键字
      
      yield关键字时机返回一个IteratorResult对象，它有两个属性：value和done，value属性是对yield后面表达式求值的结果，而done是false表示生成器函数
    尚未完成
    
      如果将参数传递给生成器的next()方法，则该值将成为生成器当前yield操作的返回值（传递给next()方法的值将赋值给 rv 变量）
      
      一旦遇到 yield 表达式，生成器的代码将被暂停运行，直到生成器的 next() 方法被调用。每次调用生成器的next()方法时，生成器都会恢复执行，直到达到
 以下某个值：
        yield，导致生成器再次暂停并返回生成器的新值。 下一次调用next()时，在yield之后紧接着的语句继续执行。
        throw用于从生成器中抛出异常。这让生成器完全停止执行，并在调用者中继续执行，正如通常情况下抛出异常一样。
        到达生成器函数的结尾；在这种情况下，生成器的执行结束，并且IteratorResult给调用者返回undefined并且done为true。
        到达return 语句。在这种情况下，生成器的执行结束，并将IteratorResult返回给调用者，其值是由return语句指定的，并且done 为true。







































































