创建简单的vue.cli小项目
  1、安装node、npm
  2、全局安装vue-cli
    npm install --global vue-cli
  3、创建一个基于webpack模板的新项目
    vue init webpack my-project
  4、安装依赖
    cd my-project
    npm run dev
  5、退出vue-cli环境
    Ctrl c
  6、报错：You may use special comments to disable some warnings.
          Use // eslint-disable-next-line to ignore the next line.
          Use /* eslint-disable */ to ignore all warnings in a file.
     解决：
       1. 在build/webpack.base.conf.js文件中，注释或者删除掉：module->rules中有关eslint的规则
        module: {
          rules: [
            //...(config.dev.useEslint ? [createLintingRule()] : []), // 注释或者删除
            {
              test: /\.vue$/,
              loader: 'vue-loader',
              options: vueLoaderConfig
            },
            ...
            }
          ]
        }
        
关于vue中的v-model：
 1、v-model一般用在输入框中，实现vue实例data中属性和模板中插值的双向绑定
 2、v-model其实是一个语法糖
  <input type='text' v-model='something' />等价于
  <input type='text' :value='something' @input='something = $event.target.value' />
  //vue实例中data中的something与模板中的value单向绑定，data.something改变，模板中的something就改变
  //input标签的input事件能够在输入框输入内容的时候改变模板中something的值
  //:value和input原生的value属性并不是同一个属性，它们两个相互独立互不影响
  
  组件详情：
  1、组件的复用
  2、组件的通信
    2.1.1 从父组件正向的向子组件传递参数或数据
      <div>
        <my-template :message="value"></my-template>
      </div>
      <script>
        var my-tmeplate = {
          name: "my-template",
          template: "\
            <p>{{message}}</p>\
          ",
          props: ["message"]
        };
        new Vue({
          el: ".app",
          data: {
            value: "hello"
          },
          components: {
            "my-template" = my-template
          }
        })
      </script>
      2.1.2 vue通过props传递数据是单向的，只能从父组件传给子组件，但是子组件不能修改该值
      2.1.3 数据验证
      <script>
        props: {
          A: {
            type: String
          },
          B: {
            type: [String, Number],
            default: "1"  //默认值是1
          },
          //如果数据类型是数组或者对象，默认值必须是一个函数来返回
          C: {
            type: Array,
            default: function() {
              return [];
            }
          },
          //数字，而且是必传 
          D: {
            type: Number,
            required: true
          },
          //自定义一个验证函数
          E: {
            validator: function(value) {
              return vlaue > 10;
            }
          }
        }
      </script>
      
    2.2 子组件向父组件通信
      2.2.1 自定义事件：
        当子组件向父组件传递数据时，可以使用自定义组件。v-on指令不仅可以监听DOM原生事件，还可以监听自定义事件。
        在vue中，子组件通过$emit()来触发子组件中的自定义事件，父组件通过$on()来监听子组件的事件
      <div class="app">
        <my-component @increase = "handlerIncrease"></my-component>
        <my-component @reduce = "handlerReduce"></my-component>
      </div>
      
      <script>
        new Vue({
          el: ".app",
          data: {
            tola: 0
          },
          components: {
            "my-component": {
              template: "\
                <button @click="handlerIncrease">+</button>\
                <button @click="handlerReduce">-</button>\
              ",
              data: function() {
                return: {
                  count: 0
                }
              },
              methods: {
                handlerIncrease: function() {
                  this.$emit("increase", this.count);
                },
                handlerReduce: function() {
                  this.$emit("reduce", this.count);
                }
              }
            }
          },
          methods: {
            handlerIncrease: function(count) {
              this.tola += count;
            },
            handlerReduce: function(count) {
              this.tola -= count;
            }
          }
        })
      </script>
      
      2.2.2 使用v-model
      <div class="app">
        <my-component v-model="value></my-component>
      </div>
      
      <script>
        var my-component = {
          name: "my-component",
          templata: "\
            <button @click="handlerClick">+</button>\
          ",
          data: function() {
            return {
              message: 0
            }
          },
          methods: {
            handlerClick: function() {
              this.message++;
              this.$emit("input", this.message);
            }
          }
        };
        
        new Vue({
          el: ".app",
          data: {
            value: 0
          },
          components: {
            "my-component": my-component
          }
        });
      </script>
      2.2.3 使用v-model来实现子组件和父组件的双向绑定
        使用props只能实现从父组件到子组件的单向绑定
        使用自定义事件只能实现从子组件到父组件的单向绑定
        如下的v-model可以实现父子组件间的双向绑定
        <div class="app">
          <my-component v-model="message"></my-component>
        </div>
        
        <script>
          var my-component = {
            name: "my-component",
            template: "\
              <button @click="handlerClick">+</button>\
              <p>{{counter}}</p>\
            ",
            props: ["value"],
            data: function() {
              return: {
                counter: this.value;
              }
            },
            methods: {
              handlerCilck: function() {
                this.counter++;
                this.$emit("input", this.counter);
              }
            }
          };
          
          new Vue({
            el: ".app",
            data: {
              message: 0
            },
            components: {
              "my-component": my-component
            }
          })
        </script>
      
      2.3 非父子组件间通信
        2.3.1 使用一个空的vue实例充当中介来实现非父子组件通信
          <div class="app">
            <my-component></my-component>
          </div>
          
          <script>
            var bus = new Vue();
            
            var my-component = {
              name: "my-component",
              tmeplate: "
                <button @click="handlerClick">+</button>
              ",
              data: function() {
                return {
                  counter: 0
                }
              },
              methods: {
                handlerClick: function() {
                  this.counter++;
                  bus.$emit("handlerIncrease", this.counter);
                }
              }
            };
            
            new Vue({
              el: ".app",
              data: {
                value: 0
              },
              mounted() {
                var _this = this;
                bus.$on("handlerIncrease", function(counter) {
                  _this.value = counter;
                });
              },
              components: {
                "my-component": my-component
              }
            })
          </script>
      
      2.4 $parent和$children
        在组件中，使用this.$parent可以直接访问该组件的父实例或组件，父组件也可以通过this.$children访问它的所有子组件，当子组件较多时，通过this.
      $children来一一遍历出子组件比较困难，并且遍历的序列不是固定的
      
      2.5 子组件索引
        vue提供了一个子组件索引的方法，用特殊的属性ref来为子组件指定一个名称，在通过this.$refs.component-name来访问该组件
        <div class="app">
          <my-component ref="myComponent"></my-component>
          <p>{{counter}}</p>
          <button @click="handlerClick">handlerClick</button>
        </div>
        
        <script>
          var my-component = {
            name: "my-component",
            tmeplate: "\
              <p>{{message}}</p>\
            ",
            data: function() {
              return {
                message: "Hello Word!"
              }
            }
          };
          
          new Vue({
            el: ".app",
            data: {
              counter: ""
            },
            methods: {
              handlerClick: function() {
                // 通过this.$refs.myComponent来访问子组件，从而获取子组件的message属性值再赋值给父组件的counter属性
                this.counter = this.$refs.myComponent.message;
              }
            }
          })
        </script>
        
      2.6 插槽
        
        
