一：单线程
  在JS引擎中解释和执行JavaScript代码的线程只有一个，我们可以称之为主线程
  但是实际上还存在其他的线程。例如：处理AJAX请求的线程、处理DOM事件的线程、定时器线程、读写文件的线程(例如在Node.js中)等等。这些线程可能存在于JS引擎之
内，也可能存在于JS引擎之外，在此我们不做区分。不妨叫它们工作线程。

二：同步和异步
  下面以AJAX请求为例，来看一下同步和异步的区别：

  异步AJAX：

    主线程：“你好，AJAX线程。请你帮我发个HTTP请求吧，我把请求地址和参数都给你了。”
    AJAX线程：“好的，主线程。我马上去发，但可能要花点儿时间呢，你可以先去忙别的。”
    主线程：：“谢谢，你拿到响应后告诉我一声啊。”
    (接着，主线程做其他事情去了。一顿饭的时间后，它收到了响应到达的通知。)

  同步AJAX：

    主线程：“你好，AJAX线程。请你帮我发个HTTP请求吧，我把请求地址和参数都给你了。”
    AJAX线程：“......”
    主线程：：“喂，AJAX线程，你怎么不说话？”
    AJAX线程：“......”
    主线程：：“喂！喂喂喂！”
    AJAX线程：“......”
    (一炷香的时间后)
    主线程：：“喂！求你说句话吧！”
    AJAX线程：“主线程，不好意思，我在工作的时候不能说话。你的请求已经发完了，拿到响应数据了，给你。”
    
  同步函数：在主线程调用该函数时能立即得到响应并且拿到同步函数返回的结果
    例如：
    Math.sqrt(2);
    在主线程调用该函数时，可以马上得到函数的响应和结果2的平方根
  异步函数：如果在函数A返回的时候，调用者还不能够得到预期结果，而是需要在将来通过一定的手段得到，那么这个函数就是异步的。
    例如：
    fs.readFile("foo.txt", "utf-8", function(err, data) {
      console.log(data);
    });
    在主线程调用fs.readFile()时，读取文件中的内容需要时间，不能马上得到文件的内容
    
三：

https://segmentfault.com/a/1190000004322358#articleHeader0
